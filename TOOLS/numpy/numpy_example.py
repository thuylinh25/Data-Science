# -*- coding: utf-8 -*-
"""Numpy_example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uKt0CbDn35EH-4DMeSaCsGTmkBoqXupc
"""

import numpy as np

"""# Create a vector"""

# Create a vector as a row
vector_row = np.array([1, 2, 3])
print(vector_row.shape)
print(vector_row.T)
print(vector_row.T.shape)
# Create a vector as a column
vector_column = np.array([[1],
                          [2],
                          [3]])
print(vector_column.shape)
print(vector_column.T)
print(vector_column.T.shape)

"""# Tranpose vector and matrix"""

# Create vector
vector = np.array([1, 2, 3, 4, 5, 6])

np.percentile(vector, 30, axis=0)

np.argmax(vector)

vector[np.argmax(vector)]

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9],
                   [10, 11, 12]])

# Tranpose vector
print(vector.shape)
vector_tranpose = vector.T
print(vector_tranpose.shape)
vector_tranpose

# Transpose matrix
print(matrix.shape)
matrix_tranpose = matrix.T
print(matrix_tranpose.shape)
matrix_tranpose

"""# Selecting Elements In An Array"""

# Create row vector
vector = np.array([1, 2, 3, 4, 5, 6])
# Select second element
vector[1]

if __name__ == "__main__":

a = int(input())

p = np.array((a, a))

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])
# Select second row and second column
matrix[1, 1]

# Create matrix
tensor = np.array([
                    [[[1, 1], [1, 1]], [[2, 2], [2, 2]]],
                    [[[3, 3], [3, 3]], [[4, 4], [4, 4]]]
                  ])
# Select second element of each of the three dimensions

tensor.shape

"""# Reshape an array"""

# Create a 4x3 matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9],
                   [10, 11, 12]])
print(matrix.shape)
# Reshape matrix 2x6
matrix = matrix.reshape(2,6)
print(matrix.shape)
matrix

matrix = np.random.rand(2,3)

matrix*4

"""# Invert a matrix"""

# Create matrix
matrix = np.array([[1, 4],
                   [2, 5]])

# Calculate inverse of matrix
a = np.linalg.inv(matrix)

"""# Getting The Diagonal Of A Matrix"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])
# Return diagonal elements
a = matrix.diagonal()

# Calculate the tracre of the matrix
matrix.diagonal().sum()
a.sum()

"""# Flatten a matrix"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Flatten matrix
matrix.flatten()

"""# Find the rank of matrix"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

np.linalg.matrix_rank(matrix)

"""# Find the maximum and minimum"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

np.max(matrix)

np.min(matrix)

# Find the maximum element in each row
np.max(matrix, axis = 0)

# Find the maximum element in each column
np.max(matrix, axis= 1)

"""# Describe an array"""

# Create matrix
matrix = np.array([[1, 2, 3, 4],
                   [5, 6, 7, 8],
                   [9, 10, 11, 12]])

# View number of rows and columns
print(matrix.shape)
# View number of elements (rows * columns)
print(matrix.size)
# View number of dimensions
print(matrix.ndim)

"""# Convert a dictionary to matrix"""

# Load library
from sklearn.feature_extraction import DictVectorizer

# Our dictionary of data
data_dict = [{'Red': 2, 'Blue': 4},
             {'Red': 4, 'Blue': 3},
             {'Red': 1, 'Yellow': 2},
             {'Red': 2, 'Yellow': 2}]

# Create DictVectorizer object
dictvectorizer = DictVectorizer(sparse=False)

# Convert dictionary into feature matrix
features = dictvectorizer.fit_transform(data_dict)

# View feature matrix
features

# View feature matrix column names
dictvectorizer.get_feature_names()

"""# Caculate the Determinant of matrix"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [-4, 15, 6],
                   [20, 7, -1]])

# Return determinant of matrix
np.linalg.det(matrix)

"""# Calculate The Average, Variance, And Standard Deviation"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Return mean
np.mean(matrix)

# Return variance
np.var(matrix)

# Return standard deviation
np.std(matrix)

"""# Calculate Dot Product Of Two Vectors"""

# Create two vectors
vector_a = np.array([1,2,3])
vector_b = np.array([4,5,6])

# Calculate dot product
np.dot(vector_a, vector_b)

# Calculate dot product
vector_a @ vector_b

vector_a.dot(vector_b)

"""# Apply Operations To Elements"""

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Create a function that adds 100 to something
add_100 = lambda i: i + 100

# Create a vectorized function
vectorized_add_100 = np.vectorize(add_100)

print(vectorized_add_100)

# Apply function to all elements in matrix
vectorized_add_100(matrix)

matrix + 100

"""# Adding And Subtracting Matrices"""

import numpy as np

a = np.array([[[1,2], [2,3]], [[2, 3], [3,4]]])

a.shape

np.sum(a, axis=0)

# Create matrix
matrix_a = np.array([[1, 1, 1],
                     [1, 1, 1],
                     [1, 1, 2]])

# Create matrix
matrix_b = np.array([[1, 3, 1],
                     [1, 3, 1],
                     [1, 3, 8]])

# Add two matrices
np.add(matrix_a, matrix_b)

# Subtract two matrices
np.subtract(matrix_a, matrix_b)

